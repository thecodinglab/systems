{ nixpkgs, flake-utils, neovim-config, terranix, ... }:
let
  modules = {
    hermes = ./hermes;
    apollo = ./apollo;
    poseidon = ./poseidon;
    hestia = ./hestia;
  };

  args = {
    inherit neovim-config;

    hermes.vhosts =
      (import ./apollo/vhosts.nix) //
      (import ./hestia/vhosts.nix) //
      {
        "iot.thecodinglab.ch" = {
          locations."/" = {
            proxyPass = "http://172.16.0.65:3000";
            recommendedProxySettings = true;
          };
        };
      };
  };

  config = builtins.mapAttrs (_: import) modules;

  nixosConfigurations = builtins.mapAttrs
    (_: config: nixpkgs.lib.nixosSystem {
      system = "x86_64-linux";
      modules = [
        ../../overlays.nix
        ../../proprietary-packages.nix
        ./base
        config.system
      ];
      specialArgs = args;
    })
    config;


  extraLib = import ./lib;

  infrastructure = builtins.map
    (config: config.infrastructure { lib = extraLib; })
    (builtins.attrValues config);

  terraformConfiguration = (system: terranix.lib.terranixConfiguration {
    inherit system;

    modules = [
      # initialize incus provider
      {
        terraform.required_providers.incus = {
          source = "lxc/incus";
          version = "0.1.1";
        };

        provider.incus = { };
      }
      # initialize cloudflare provider
      {
        terraform.required_providers.cloudflare = {
          source = "cloudflare/cloudflare";
          version = "4.33.0";
        };

        provider.cloudflare = {
          api_token = extraLib.cloudflare.api_token;
        };

        resource.cloudflare_record.server = {
          zone_id = extraLib.cloudflare.zone_id;

          type = "A";
          name = "server";
          value = extraLib.home.ipv4;

          proxied = true;
          ttl = 1;

          comment = "generated by nix (https://github.com/thecodinglab/systems)";
        };
      }
    ] ++ infrastructure;
  });

in
{
  inherit nixosConfigurations;

  packages = (system: {
    terraform-config = terraformConfiguration system;
  });

  apps = (system:
    let
      pkgs = import nixpkgs { inherit system; };

      makeOpenTofuCommandApp = (cmd: {
        type = "app";
        program = toString (pkgs.writers.writeBash cmd ''
          if [[ -h config.tf.json ]]; then rm config.tf.json; fi
          ln -s ${terraformConfiguration system} config.tf.json
          ${pkgs.opentofu}/bin/tofu init
          ${pkgs.opentofu}/bin/tofu ${cmd}
        '');
      });
    in
    {
      terraform-plan = makeOpenTofuCommandApp "plan";
      terraform-apply = makeOpenTofuCommandApp "apply";
      terraform-destroy = makeOpenTofuCommandApp "destroy";
    });
}
